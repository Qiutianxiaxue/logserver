openapi: 3.0.3
info:
  title: 日志服务器 API
  description: |
    基于 Node.js、Express 和 TypeScript 的日志服务器 API。
    
    ## 功能特性
    - 统一的响应格式 (code/data/message)
    - 所有接口使用 POST 方法
    - 支持日志缓存和数据库健康检查
    - 支持批量日志提交
    - 完整的时间处理和验证
    
    ## 响应格式
    所有接口统一返回格式：
    ```json
    {
      "code": 1,           // 0: 失败, 1: 成功
      "message": "说明",    // 操作结果说明
      "data": {}           // 返回的数据 (可选)
    }
    ```
  version: 1.0.0
  contact:
    name: 日志服务器项目
    url: https://github.com/your-repo/logserver
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:13000
    description: 开发环境
  - url: https://log.gkwxhxcj.com
    description: 生产环境

tags:
  - name: 基础
    description: 基础接口 (首页、健康检查)
  - name: 日志管理
    description: 日志的创建、查询和统计
  - name: 统计分析
    description: 日志统计和API请求统计分析
  - name: 缓存管理
    description: 本地缓存的管理和状态查询
  - name: 系统监控
    description: 系统健康状态和监控

components:
  schemas:
    ApiResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          enum: [0, 1]
          description: "0: 失败, 1: 成功"
          example: 1
        message:
          type: string
          description: 操作结果说明
          example: "操作成功"
        data:
          type: object
          description: 返回的数据
          
    LogData:
      type: object
      required:
        - message
      properties:
        level:
          type: string
          enum: [debug, info, warn, error]
          default: info
          description: 日志级别
        log_type:
          type: string
          default: application
          description: 日志类型（自定义字符串，用于分类和筛选）
          example: "user_behavior"
        message:
          type: string
          description: 日志消息
          example: "用户登录成功"
        service:
          type: string
          default: unknown
          description: 服务名称
          example: "auth-service"
        service_name:
          type: string
          description: 服务实例名称
          example: "auth-service-01"
        service_ip:
          type: string
          description: 服务IP地址
          example: "192.168.1.100"
        appid:
          type: string
          description: 应用ID
          example: "app_123456"
        enterprise_id:
          type: string
          description: 企业ID
          example: "ent_789012"
        user_id:
          type: string
          description: 用户ID
          example: "user_345678"
        extra_data:
          type: object
          description: 额外数据
          example: { "action": "login", "duration": 1200 }
        timestamp:
          type: string
          description: 时间戳 (YYYY-MM-DD HH:mm:ss 或 ISO 8601)
          example: "2025-12-11 14:30:25"
          
    LogQueryRequest:
      type: object
      properties:
        limit:
          type: integer
          default: 100
          minimum: 1
          maximum: 1000
          description: 限制数量
        offset:
          type: integer
          default: 0
          minimum: 0
          description: 偏移量
        level:
          type: string
          enum: [debug, info, warn, error]
          description: 日志级别过滤
        log_type:
          type: string
          description: 日志类型过滤（自定义字符串）
          example: "user_behavior"
        service:
          type: string
          description: 服务名过滤
        service_name:
          type: string
          description: 服务实例名称过滤
          example: "auth-service-01"
        service_ip:
          type: string
          description: 服务IP地址过滤
          example: "192.168.1.100"
        appid:
          type: string
          description: 应用ID过滤
          example: "app_123456"
        enterprise_id:
          type: string
          description: 企业ID过滤
          example: "ent_789012"
        user_id:
          type: string
          description: 用户ID过滤
          example: "user_345678"
        startTime:
          type: string
          description: 开始时间 (YYYY-MM-DD HH:mm:ss)
          example: "2025-12-11 10:00:00"
        endTime:
          type: string
          description: 结束时间 (YYYY-MM-DD HH:mm:ss)
          example: "2025-12-11 18:00:00"
        keyword:
          type: string
          description: 关键词搜索
          
    BatchLogRequest:
      type: object
      required:
        - logs
      properties:
        logs:
          type: array
          items:
            $ref: '#/components/schemas/LogData'
          minItems: 1
          maxItems: 1000
          description: 日志数组 (最多1000条)
          
    StatsRequest:
      type: object
      properties:
        timeRange:
          type: string
          enum: [1h, 24h, 7d, 30d, 90d]
          default: 24h
          description: 时间范围

    ApiRequestLogData:
      type: object
      required:
        - method
        - url
        - status_code
        - response_time
      properties:
        # 基础字段
        id:
          type: string
          description: 唯一标识符
          example: "550e8400-e29b-41d4-a716-446655440000"
        timestamp:
          type: string
          description: 时间戳 (YYYY-MM-DD HH:mm:ss 或 ISO 8601)
          example: "2025-12-11 14:30:25"
        created_date:
          type: string
          description: 创建日期
          example: "2025-12-11"
        
        # 请求基本信息（必填）
        method:
          type: string
          description: HTTP 方法
          example: "POST"
        url:
          type: string
          description: 完整请求 URL
          example: "https://api.example.com/v1/users/login"
        host:
          type: string
          description: 主机名
          example: "api.example.com"
        path:
          type: string
          description: URL 路径
          example: "/v1/users/login"
        query_params:
          type: string
          description: 查询参数
          example: "page=1&limit=10"
        headers:
          oneOf:
            - type: string
            - type: object
          description: 请求头
          example: '{"Content-Type": "application/json", "Authorization": "Bearer token123"}'
        body:
          type: string
          description: 请求体
          example: '{"username": "admin", "password": "***"}'
        body_size:
          type: integer
          description: 请求体大小（字节）
          example: 256
        content_type:
          type: string
          description: 内容类型
          example: "application/json"
        
        # 应用信息
        appid:
          type: string
          description: 应用ID
          example: "app_123456"
        app_name:
          type: string
          description: 应用名称
          example: "UserService"
        
        # 企业信息
        enterprise_id:
          type: string
          description: 企业ID
          example: "ent_789012"
        enterprise_name:
          type: string
          description: 企业名称
          example: "Example Corp"
        
        # 用户和会话信息
        user_id:
          type: string
          description: 用户ID
          example: "user_123456"
        ip_address:
          type: string
          description: 客户端IP地址
          example: "192.168.1.10"
        real_ip:
          type: string
          description: 真实IP地址（代理后）
          example: "203.0.113.10"
        user_agent:
          type: string
          description: 用户代理
          example: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        referer:
          type: string
          description: 来源页面
          example: "https://example.com/home"
        
        # 响应信息（必填：status_code, response_time）
        status_code:
          type: integer
          description: HTTP 状态码
          example: 200
        response_body:
          type: string
          description: 响应体
          example: '{"code": 1, "message": "登录成功", "data": {"token": "jwt_token"}}'
        response_size:
          type: integer
          description: 响应体大小（字节）
          example: 1024
        response_time:
          type: integer
          description: 响应时间（毫秒）
          example: 150
        response_headers:
          oneOf:
            - type: string
            - type: object
          description: 响应头
          example: '{"Content-Type": "application/json"}'
        
        # 地理位置信息
        country_info:
          type: string
          description: 国家信息
          example: "China,CN,Beijing"
        
        # 设备和浏览器信息
        browser:
          type: string
          description: 浏览器
          example: "Chrome"
        
        # 服务器信息
        service_type:
          type: string
          description: 服务类型
          example: "API Gateway"
        service_name:
          type: string
          description: 服务名称
          example: "api-gateway"
        service_ip:
          type: string
          description: 服务器IP地址
          example: "10.0.1.100"
        
        # 错误和调试信息
        error_code:
          type: string
          description: 错误代码
          example: "AUTH_FAILED"
        error_message:
          type: string
          description: 错误消息
          example: "Invalid credentials"
        error_trace:
          type: string
          description: 错误追踪信息
          example: "AuthenticationError at line 123"

    LogStatisticsData:
      type: object
      properties:
        qc_log_statistics_id:
          type: integer
          description: 统计记录ID
          example: 12345
        stat_time:
          type: string
          description: 统计时间点 (小时=2025070415, 天=20250704, 月=202507, 周=2025W30)
          example: "20251211"
        stat_type:
          type: string
          enum: [hour, day, week, month]
          description: 统计类型
          example: "day"
        log_type:
          type: string
          description: 日志类型
          example: "user_behavior"
        service:
          type: string
          description: 服务名称
          example: "auth-service"
        level:
          type: string
          enum: [debug, info, warn, error]
          description: 日志级别
          example: "info"
        appid:
          type: string
          description: 应用ID
          example: "app_123456"
        enterprise_id:
          type: string
          description: 企业ID
          example: "ent_789012"
        count:
          type: integer
          description: 统计数量
          example: 150
        create_time:
          type: string
          description: 创建时间
          example: "2025-12-11 14:30:25"
        update_time:
          type: string
          description: 更新时间
          example: "2025-12-11 14:30:25"

    ApiStatisticsData:
      type: object
      properties:
        qc_api_statistics_id:
          type: string
          description: API统计记录ID
          example: "api_stat_12345"
        stat_time:
          type: string
          description: 统计时间点
          example: "20251211"
        stat_type:
          type: string
          enum: [hour, day, week, month]
          description: 统计类型
          example: "day"
        stat_date:
          type: string
          description: 统计日期
          example: "2025-12-11"
        method:
          type: string
          description: HTTP方法
          example: "POST"
        host:
          type: string
          description: 主机名
          example: "api.example.com"
        path:
          type: string
          description: URL路径
          example: "/v1/auth/login"
        appid:
          type: string
          description: 应用ID
          example: "app_123456"
        enterprise_id:
          type: string
          description: 企业ID
          example: "ent_789012"
        status_code:
          type: integer
          description: HTTP状态码
          example: 200
        request_count:
          type: integer
          description: 请求总数
          example: 1250
        unique_users:
          type: integer
          description: 独立用户数
          example: 85
        unique_ips:
          type: integer
          description: 独立IP数
          example: 120
        avg_response_time:
          type: number
          description: 平均响应时间(毫秒)
          example: 125.5
        p95_response_time:
          type: number
          description: 95%响应时间(毫秒)
          example: 250.8
        total_bytes_sent:
          type: integer
          description: 发送字节总数
          example: 1048576
        total_bytes_received:
          type: integer
          description: 接收字节总数
          example: 2097152
        error_count:
          type: integer
          description: 错误数量
          example: 15
        error_rate:
          type: number
          description: 错误率(%)
          example: 1.2
        create_time:
          type: string
          description: 创建时间
          example: "2025-12-11 14:30:25"
        update_time:
          type: string
          description: 更新时间
          example: "2025-12-11 14:30:25"

    StatisticsQueryRequest:
      type: object
      properties:
        startTime:
          type: string
          description: 开始时间 (YYYY-MM-DD HH:mm:ss)
          example: "2025-12-11 10:00:00"
        endTime:
          type: string
          description: 结束时间 (YYYY-MM-DD HH:mm:ss)
          example: "2025-12-11 18:00:00"
        statType:
          type: string
          enum: [hour, day, week, month]
          description: 统计类型
          example: "day"
        enterprise_id:
          type: string
          description: 企业ID过滤
          example: "ent_789012"
        appid:
          type: string
          description: 应用ID过滤
          example: "app_123456"
        service:
          type: string
          description: 服务名过滤
          example: "auth-service"
        level:
          type: string
          enum: [debug, info, warn, error]
          description: 日志级别过滤
          example: "info"
        log_type:
          type: string
          description: 日志类型过滤
          example: "user_behavior"
        limit:
          type: integer
          default: 100
          minimum: 1
          maximum: 1000
          description: 返回条数限制
        offset:
          type: integer
          default: 0
          minimum: 0
          description: 偏移量
        groupBy:
          type: string
          description: 分组字段 (stat_time/service/level/appid/enterprise_id/log_type)
          example: "service"

    UpdateStatisticsRequest:
      type: object
      required:
        - statType
      properties:
        statType:
          type: string
          enum: [hour, day, week, month]
          description: 统计类型
          example: "hour"
        targetTime:
          type: string
          description: 目标时间 (ISO 8601格式)
          example: "2025-12-11T10:00:00.000Z"

paths:
  /:
    post:
      tags:
        - 基础
      summary: 首页信息
      description: 获取服务器基本信息
      responses:
        '200':
          description: 成功获取首页信息
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"
                          status:
                            type: string
                            example: "running"
                          environment:
                            type: string
                            example: "development"
                          version:
                            type: string
                            example: "1.0.0"
                          server_time:
                            type: string
                            example: "2025-12-11 14:30:25"
                          timezone:
                            type: string
                            example: "Asia/Shanghai"
              example:
                code: 1
                message: "欢迎使用日志服务器!"
                data:
                  timestamp: "2025-12-11 14:30:25"
                  status: "running"
                  environment: "development"
                  version: "1.0.0"
                  server_time: "2025-12-11 14:30:25"
                  timezone: "Asia/Shanghai"

  /health:
    post:
      tags:
        - 基础
      summary: 健康检查
      description: 检查服务器健康状态
      responses:
        '200':
          description: 健康检查成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          status:
                            type: string
                            example: "healthy"
                          uptime:
                            type: number
                            example: 3600.123
                          uptime_human:
                            type: string
                            example: "2025-12-11 13:30:25"
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"
                          environment:
                            type: string
                            example: "development"
                          memory:
                            type: object
                          pid:
                            type: integer
                            example: 12345
                          timezone:
                            type: string
                            example: "Asia/Shanghai"

  /api/logs/query:
    post:
      tags:
        - 日志管理
      summary: 查询日志列表
      description: 根据条件查询日志记录
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogQueryRequest'
            examples:
              basic:
                summary: 基础查询
                value:
                  limit: 50
                  offset: 0
              filtered:
                summary: 过滤查询
                value:
                  limit: 100
                  level: "error"
                  log_type: "payment_error"
                  service: "payment-service"
                  service_name: "payment-service-01"
                  enterprise_id: "ent_789012"
                  startTime: "2025-12-11 10:00:00"
                  endTime: "2025-12-11 18:00:00"
              search:
                summary: 关键词搜索
                value:
                  keyword: "登录"
                  user_id: "user_345678"
                  appid: "app_123456"
                  limit: 20
              log_type_filter:
                summary: 按日志类型过滤
                value:
                  limit: 50
                  log_type: "user_behavior_tracking"
                  enterprise_id: "ent_789012"
                  startTime: "2025-12-11 00:00:00"
                  endTime: "2025-12-11 23:59:59"
              advanced:
                summary: 高级查询
                value:
                  limit: 100
                  service_name: "payment-service-02"
                  service_ip: "192.168.1.102"
                  appid: "app_123456"
                  enterprise_id: "ent_789012"
                  user_id: "user_345678"
                  level: "warn"
                  log_type: "suspicious_activity"
                  startTime: "2025-12-11 08:00:00"
                  endTime: "2025-12-11 20:00:00"
      responses:
        '200':
          description: 成功获取日志列表
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          logs:
                            type: array
                            items:
                              $ref: '#/components/schemas/LogData'
                          count:
                            type: integer
                            example: 25
                          environment:
                            type: string
                            example: "development"
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                code: 0
                message: "开始时间格式无效"

  /api/logs/create:
    post:
      tags:
        - 日志管理
      summary: 创建单条日志
      description: 提交单条日志记录
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogData'
            examples:
              user_behavior_log:
                summary: 用户行为日志
                value:
                  level: "info"
                  log_type: "user_behavior"
                  message: "用户登录成功"
                  service: "auth-service"
                  service_name: "auth-service-01"
                  service_ip: "192.168.1.100"
                  appid: "app_123456"
                  enterprise_id: "ent_789012"
                  user_id: "user123"
                  extra_data:
                    action: "login"
                    duration: 1200
              database_error:
                summary: 数据库错误
                value:
                  level: "error"
                  log_type: "db_connection_error"
                  message: "数据库连接失败"
                  service: "database-service"
                  service_name: "db-service-02"
                  service_ip: "192.168.1.101"
                  appid: "app_123456"
                  enterprise_id: "ent_789012"
                  extra_data:
                    error_code: "DB_TIMEOUT"
                    connection_pool: "main"
              admin_audit:
                summary: 管理员审计
                value:
                  level: "info"
                  log_type: "admin_audit"
                  message: "用户权限变更"
                  service: "admin-service"
                  service_name: "admin-service-01"
                  service_ip: "192.168.1.102"
                  appid: "app_123456"
                  enterprise_id: "ent_789012"
                  user_id: "admin123"
                  extra_data:
                    action: "permission_change"
                    target_user: "user456"
                    old_role: "user"
                    new_role: "admin"
      responses:
        '200':
          description: 日志创建成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"
                          cached:
                            type: boolean
                            description: 是否已缓存 (数据库不可用时)
                          totalCached:
                            type: integer
                            description: 总缓存数量
              examples:
                success:
                  summary: 成功存储
                  value:
                    code: 1
                    message: "日志已成功存储"
                    data:
                      timestamp: "2025-12-11 14:30:25"
                cached:
                  summary: 缓存模式
                  value:
                    code: 1
                    message: "数据库暂时不可用，日志已缓存到本地"
                    data:
                      cached: true
                      totalCached: 156
                      timestamp: "2025-12-11 14:30:25"
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                code: 0
                message: "日志消息不能为空"
        '500':
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                code: 0
                message: "日志存储失败，数据库和缓存都不可用"

  /api/logs/api-request:
    post:
      tags:
        - 日志管理
      summary: 创建 API 请求日志
      description: 提交 API 请求日志记录，用于记录和分析 API 调用详情
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiRequestLogData'
            examples:
              user_login:
                summary: 用户登录请求
                value:
                  method: "POST"
                  url: "https://api.example.com/v1/auth/login"
                  path: "/v1/auth/login"
                  status_code: 200
                  response_time: 150.5
                  user_id: "user_123456"
                  ip_address: "192.168.1.10"
                  user_agent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
                  service_name: "auth-service"
                  endpoint: "user_login"
                  environment: "production"
                  headers:
                    Content-Type: "application/json"
                    Authorization: "Bearer token123"
                  body: '{"username":"admin","password":"***"}'
                  response_body: '{"code":1,"message":"登录成功","data":{"token":"jwt_token"}}'
              api_error:
                summary: API 错误请求
                value:
                  method: "GET"
                  url: "https://api.example.com/v1/users/999999"
                  path: "/v1/users/999999"
                  status_code: 404
                  response_time: 25.3
                  user_id: "user_789012"
                  ip_address: "203.0.113.10"
                  service_name: "user-service"
                  endpoint: "get_user"
                  environment: "production"
                  error_code: "USER_NOT_FOUND"
                  error_message: "用户不存在"
                  trace_id: "trace-123456789"
                  span_id: "span-987654321"
              mobile_request:
                summary: 移动端请求
                value:
                  method: "POST"
                  url: "https://api.example.com/v1/orders"
                  path: "/v1/orders"
                  status_code: 201
                  response_time: 320.8
                  user_id: "user_345678"
                  session_id: "sess_mobile_123"
                  ip_address: "192.168.1.20"
                  user_agent: "MyApp/1.2.0 (iOS 14.5; iPhone 12)"
                  device_type: "mobile"
                  device_brand: "Apple"
                  device_model: "iPhone 12"
                  os: "iOS"
                  os_version: "14.5"
                  service_name: "order-service"
                  endpoint: "create_order"
                  environment: "production"
                  business_metrics:
                    order_amount: 299.99
                    payment_method: "alipay"
                  tags: ["mobile", "order", "payment"]
              trace_request:
                summary: 分布式追踪请求
                value:
                  method: "PUT"
                  url: "https://api.example.com/v1/products/12345"
                  path: "/v1/products/12345"
                  status_code: 200
                  response_time: 89.2
                  user_id: "admin_001"
                  ip_address: "10.0.1.50"
                  service_name: "product-service"
                  service_version: "v2.1.0"
                  instance_id: "product-service-pod-3"
                  host: "k8s-node-02"
                  environment: "production"
                  deployment_region: "us-east-1"
                  api_version: "v1"
                  endpoint: "update_product"
                  operation_id: "product.update"
                  controller: "ProductController"
                  action: "update"
                  trace_id: "trace-abcd1234"
                  span_id: "span-efgh5678"
                  parent_span_id: "span-ijkl9012"
                  tenant_id: "tenant_enterprise"
                  organization_id: "org_retail_chain"
                  request_id: "req_update_prod_999"
      responses:
        '200':
          description: API 请求日志创建成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"
              examples:
                success:
                  summary: 成功存储
                  value:
                    code: 1
                    message: "API请求日志已成功存储"
                    data:
                      timestamp: "2025-12-11 14:30:25"
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                missing_required:
                  summary: 缺少必填字段
                  value:
                    code: 0
                    message: "method、url 和 status_code 不能为空"
                invalid_timestamp:
                  summary: 时间戳格式错误
                  value:
                    code: 0
                    message: "时间戳格式无效，支持格式: YYYY-MM-DD HH:mm:ss 或 ISO 8601"
        '500':
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                code: 0
                message: "API请求日志存储失败"

  /api/logs/api-request/query:
    post:
      tags:
        - 日志管理
      summary: 查询 API 请求日志
      description: 根据条件查询 API 请求日志记录
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                limit:
                  type: integer
                  default: 100
                  minimum: 1
                  maximum: 1000
                  description: 限制数量
                offset:
                  type: integer
                  default: 0
                  minimum: 0
                  description: 偏移量
                startTime:
                  type: string
                  description: 开始时间 (YYYY-MM-DD HH:mm:ss)
                  example: "2025-12-11 10:00:00"
                endTime:
                  type: string
                  description: 结束时间 (YYYY-MM-DD HH:mm:ss)
                  example: "2025-12-11 18:00:00"
                method:
                  type: string
                  description: HTTP 方法过滤
                  example: "POST"
                status_code:
                  type: integer
                  description: HTTP 状态码过滤
                  example: 200
                service_name:
                  type: string
                  description: 服务名称过滤
                  example: "auth-service"
                service_type:
                  type: string
                  description: 服务类型过滤
                  example: "API Gateway"
                appid:
                  type: string
                  description: 应用ID过滤
                  example: "app_123456"
                app_name:
                  type: string
                  description: 应用名称过滤
                  example: "UserService"
                enterprise_id:
                  type: string
                  description: 企业ID过滤
                  example: "ent_789012"
                enterprise_name:
                  type: string
                  description: 企业名称过滤
                  example: "Example Corp"
                user_id:
                  type: string
                  description: 用户ID过滤
                  example: "user_123456"
                ip_address:
                  type: string
                  description: IP地址过滤
                  example: "192.168.1.10"
                real_ip:
                  type: string
                  description: 真实IP地址过滤
                  example: "203.0.113.10"
                min_response_time:
                  type: integer
                  description: 最小响应时间 (毫秒)
                  example: 100
                max_response_time:
                  type: integer
                  description: 最大响应时间 (毫秒)
                  example: 1000
                has_error:
                  type: boolean
                  description: 是否包含错误
                error_code:
                  type: string
                  description: 错误代码过滤
                  example: "AUTH_FAILED"
                keyword:
                  type: string
                  description: 关键词搜索
                sort_by:
                  type: string
                  enum: [timestamp, response_time, status_code]
                  default: timestamp
                  description: 排序字段
                sort_order:
                  type: string
                  enum: [ASC, DESC]
                  default: DESC
                  description: 排序方向
            examples:
              basic_query:
                summary: 基础查询
                value:
                  limit: 50
                  startTime: "2025-12-11 10:00:00"
                  endTime: "2025-12-11 18:00:00"
              filter_by_service:
                summary: 按服务过滤
                value:
                  service_name: "auth-service"
                  service_type: "API Gateway"
                  status_code: 200
                  limit: 100
              filter_by_app:
                summary: 按应用过滤
                value:
                  appid: "app_123456"
                  app_name: "UserService"
                  enterprise_id: "ent_789012"
                  limit: 100
              slow_requests:
                summary: 慢请求查询
                value:
                  min_response_time: 1000
                  sort_by: "response_time"
                  sort_order: "DESC"
              error_requests:
                summary: 错误请求查询
                value:
                  has_error: true
                  error_code: "AUTH_FAILED"
                  startTime: "2025-12-11 00:00:00"
                  endTime: "2025-12-11 23:59:59"
      responses:
        '200':
          description: API 请求日志查询成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          logs:
                            type: array
                            items:
                              $ref: '#/components/schemas/ApiRequestLogData'
                          count:
                            type: integer
                            example: 25
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"

  /api/logs/api-request/stats:
    post:
      tags:
        - 日志管理
      summary: 获取 API 请求日志统计
      description: 获取指定时间范围内的 API 请求统计信息
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                timeRange:
                  type: string
                  enum: [1h, 24h, 7d, 30d, 90d]
                  default: 24h
                  description: 时间范围
                groupBy:
                  type: string
                  enum: [hour, day, week]
                  default: hour
                  description: 分组方式
            examples:
              hourly_stats:
                summary: 按小时统计
                value:
                  timeRange: "24h"
                  groupBy: "hour"
              daily_stats:
                summary: 按天统计
                value:
                  timeRange: "7d"
                  groupBy: "day"
      responses:
        '200':
          description: API 请求统计获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          stats:
                            type: array
                            items:
                              type: object
                              properties:
                                time_period:
                                  type: string
                                  example: "2025-12-11 14:00:00"
                                total_requests:
                                  type: integer
                                  example: 1250
                                avg_response_time:
                                  type: number
                                  example: 125.5
                                error_rate:
                                  type: number
                                  example: 2.5
                                status_2xx:
                                  type: integer
                                  example: 1200
                                status_4xx:
                                  type: integer
                                  example: 30
                                status_5xx:
                                  type: integer
                                  example: 20
                          timeRange:
                            type: string
                            example: "24h"
                          groupBy:
                            type: string
                            example: "hour"
                          count:
                            type: integer
                            example: 24
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"

  /api/logs/api-request/endpoints/top:
    post:
      tags:
        - 日志管理
      summary: 获取热门端点统计
      description: 获取指定时间范围内访问量最高的端点统计
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                timeRange:
                  type: string
                  enum: [1h, 24h, 7d, 30d, 90d]
                  default: 24h
                  description: 时间范围
                limit:
                  type: integer
                  default: 10
                  minimum: 1
                  maximum: 100
                  description: 返回数量限制
            examples:
              top_10:
                summary: 前10热门端点
                value:
                  timeRange: "24h"
                  limit: 10
              top_endpoints_week:
                summary: 一周热门端点
                value:
                  timeRange: "7d"
                  limit: 20
      responses:
        '200':
          description: 热门端点统计获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          endpoints:
                            type: array
                            items:
                              type: object
                              properties:
                                endpoint:
                                  type: string
                                  example: "/v1/auth/login"
                                count:
                                  type: integer
                                  example: 1250
                                avg_response_time:
                                  type: number
                                  example: 125.5
                          timeRange:
                            type: string
                            example: "24h"
                          limit:
                            type: integer
                            example: 10
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"

  /api/logs/api-request/errors:
    post:
      tags:
        - 日志管理
      summary: 获取 API 错误统计
      description: 获取指定时间范围内的 API 错误统计信息
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                timeRange:
                  type: string
                  enum: [1h, 24h, 7d, 30d, 90d]
                  default: 24h
                  description: 时间范围
                limit:
                  type: integer
                  default: 10
                  minimum: 1
                  maximum: 100
                  description: 返回数量限制
            examples:
              recent_errors:
                summary: 最近错误统计
                value:
                  timeRange: "24h"
                  limit: 10
              error_analysis:
                summary: 错误分析
                value:
                  timeRange: "7d"
                  limit: 20
      responses:
        '200':
          description: API 错误统计获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          errors:
                            type: array
                            items:
                              type: object
                              properties:
                                error_code:
                                  type: string
                                  example: "USER_NOT_FOUND"
                                error_message:
                                  type: string
                                  example: "用户不存在"
                                count:
                                  type: integer
                                  example: 45
                          timeRange:
                            type: string
                            example: "24h"
                          limit:
                            type: integer
                            example: 10
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"

  /api/logs/batch:
    post:
      tags:
        - 日志管理
      summary: 批量创建日志
      description: 批量提交日志记录 (最多1000条)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchLogRequest'
            example:
              logs:
                - level: "info"
                  log_type: "user_login"
                  message: "用户登录"
                  service: "auth-service"
                  service_name: "auth-service-01"
                  appid: "app_123456"
                  enterprise_id: "ent_789012"
                  user_id: "user123"
                - level: "info"
                  log_type: "data_access"
                  message: "获取用户信息"
                  service: "user-service"
                  service_name: "user-service-01"
                  appid: "app_123456"
                  enterprise_id: "ent_789012"
                  user_id: "user123"
                - level: "warn"
                  log_type: "rate_limit"
                  message: "请求频率过高"
                  service: "rate-limiter"
                  service_name: "rate-limiter-01"
                  appid: "app_123456"
                  enterprise_id: "ent_789012"
                  user_id: "user123"
      responses:
        '200':
          description: 批量日志创建成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          count:
                            type: integer
                            example: 3
                          cached:
                            type: boolean
                            example: false
                          totalCached:
                            type: integer
                            description: 总缓存数量 (缓存模式时)
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                empty_array:
                  summary: 空数组
                  value:
                    code: 0
                    message: "日志数组不能为空"
                too_many:
                  summary: 超出限制
                  value:
                    code: 0
                    message: "单次批量插入不能超过1000条记录"

  /api/logs/stats:
    post:
      tags:
        - 日志管理
      summary: 获取日志统计
      description: 获取指定时间范围内的日志统计信息
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatsRequest'
            examples:
              hour:
                summary: 1小时统计
                value:
                  timeRange: "1h"
              day:
                summary: 24小时统计
                value:
                  timeRange: "24h"
              week:
                summary: 7天统计
                value:
                  timeRange: "7d"
      responses:
        '200':
          description: 统计信息获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          stats:
                            type: array
                            items:
                              type: object
                              properties:
                                level:
                                  type: string
                                  example: "error"
                                count:
                                  type: integer
                                  example: 25
                                service:
                                  type: string
                                  example: "auth-service"
                                hour:
                                  type: integer
                                  example: 14
                          timeRange:
                            type: string
                            example: "24h"
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"

  /api/logs/cache/status:
    post:
      tags:
        - 缓存管理
      summary: 获取缓存状态
      description: 查询本地缓存的状态信息
      responses:
        '200':
          description: 缓存状态获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          cache:
                            type: object
                            properties:
                              count:
                                type: integer
                                example: 156
                              oldestCacheTime:
                                type: string
                                example: "2025-12-11 10:15:30"
                              newestCacheTime:
                                type: string
                                example: "2025-12-11 14:28:45"
                              fileSizeBytes:
                                type: integer
                                example: 2048576
                              fileSizeMB:
                                type: string
                                example: "1.95"
                          database:
                            type: object
                            properties:
                              isHealthy:
                                type: boolean
                                example: false
                              lastCheckTime:
                                type: string
                                example: "2025-12-11 14:30:20"
                              retryCount:
                                type: integer
                                example: 3
                              maxRetries:
                                type: integer
                                example: 5
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"

  /api/logs/cache/process:
    post:
      tags:
        - 缓存管理
      summary: 处理缓存日志
      description: |
        手动触发缓存日志写入数据库
        
        **功能说明:**
        - 强制检查数据库健康状态
        - 处理所有缓存中的日志数据
        - 系统会自动处理缓存，通常无需手动调用
        - 主要用于故障排查和运维管理
        
        **注意事项:**
        - 只有在数据库连接健康时才会处理缓存
        - 处理失败的日志会保留在缓存中
        - 处理前会自动备份缓存文件
      responses:
        '200':
          description: 缓存处理成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          processed:
                            type: integer
                            example: 150
                          failed:
                            type: integer
                            example: 6
                          errors:
                            type: array
                            items:
                              type: string
                            example: ["处理缓存日志失败 (ID: cache_123): Database error"]
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"
        '500':
          description: 缓存处理失败
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                code: 0
                message: "数据库连接不可用"

  /api/logs/cache/clear:
    post:
      tags:
        - 缓存管理
      summary: 清空缓存
      description: 手动清空本地缓存文件
      responses:
        '200':
          description: 缓存清空成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"

  /api/logs/system/health:
    post:
      tags:
        - 系统监控
      summary: 系统健康报告
      description: 获取详细的系统健康状态报告
      responses:
        '200':
          description: 系统健康报告获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          database:
                            type: object
                            properties:
                              isHealthy:
                                type: boolean
                                example: true
                              lastCheckTime:
                                type: string
                                example: "2025-12-11 14:30:20"
                              retryCount:
                                type: integer
                                example: 0
                              maxRetries:
                                type: integer
                                example: 5
                          cache:
                            type: object
                            properties:
                              count:
                                type: integer
                                example: 0
                              fileSizeBytes:
                                type: integer
                                example: 0
                              fileSizeMB:
                                type: string
                                example: "0.00"
                          system:
                            type: object
                            properties:
                              uptime:
                                type: number
                                example: 3600.123
                              memory:
                                type: object
                                properties:
                                  rss:
                                    type: integer
                                  heapTotal:
                                    type: integer
                                  heapUsed:
                                    type: integer
                                  external:
                                    type: integer
                                  arrayBuffers:
                                    type: integer
                              timestamp:
                                type: string
                                example: "2025-12-11 14:30:25"

  # 日志统计接口
  /api/logs/statistics:
    get:
      tags:
        - 统计分析
      summary: 查询日志统计数据
      description: 根据条件查询日志统计记录
      parameters:
        - name: startTime
          in: query
          description: 开始时间 (YYYY-MM-DD HH:mm:ss)
          schema:
            type: string
            example: "2025-12-11 10:00:00"
        - name: endTime
          in: query
          description: 结束时间 (YYYY-MM-DD HH:mm:ss)
          schema:
            type: string
            example: "2025-12-11 18:00:00"
        - name: statType
          in: query
          description: 统计类型
          schema:
            type: string
            enum: [hour, day, week, month]
            example: "day"
        - name: enterprise_id
          in: query
          description: 企业ID过滤
          schema:
            type: string
            example: "ent_789012"
        - name: appid
          in: query
          description: 应用ID过滤
          schema:
            type: string
            example: "app_123456"
        - name: service
          in: query
          description: 服务名过滤
          schema:
            type: string
            example: "auth-service"
        - name: level
          in: query
          description: 日志级别过滤
          schema:
            type: string
            enum: [debug, info, warn, error]
            example: "info"
        - name: log_type
          in: query
          description: 日志类型过滤
          schema:
            type: string
            example: "user_behavior"
        - name: limit
          in: query
          description: 返回条数限制
          schema:
            type: integer
            default: 100
            minimum: 1
            maximum: 1000
        - name: offset
          in: query
          description: 偏移量
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: 成功获取日志统计数据
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          statistics:
                            type: array
                            items:
                              $ref: '#/components/schemas/LogStatisticsData'
                          total:
                            type: integer
                            example: 150
                          pagination:
                            type: object
                            properties:
                              limit:
                                type: integer
                                example: 100
                              offset:
                                type: integer
                                example: 0
                              hasMore:
                                type: boolean
                                example: true
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"

  /api/logs/statistics/aggregated:
    get:
      tags:
        - 统计分析
      summary: 获取聚合统计数据
      description: 按指定字段分组获取聚合统计数据
      parameters:
        - name: startTime
          in: query
          description: 开始时间
          schema:
            type: string
            example: "2025-12-11 10:00:00"
        - name: endTime
          in: query
          description: 结束时间
          schema:
            type: string
            example: "2025-12-11 18:00:00"
        - name: statType
          in: query
          description: 统计类型
          schema:
            type: string
            enum: [hour, day, week, month]
            example: "day"
        - name: groupBy
          in: query
          description: 分组字段
          schema:
            type: string
            enum: [stat_time, service, level, appid, enterprise_id, log_type]
            example: "service"
        - name: enterprise_id
          in: query
          schema:
            type: string
        - name: appid
          in: query
          schema:
            type: string
        - name: service
          in: query
          schema:
            type: string
        - name: level
          in: query
          schema:
            type: string
        - name: log_type
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: 成功获取聚合统计数据
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          aggregatedData:
                            type: array
                            items:
                              type: object
                              properties:
                                key:
                                  type: string
                                value:
                                  type: string
                                totalCount:
                                  type: integer
                          groupBy:
                            type: string
                            example: "service"
                          total:
                            type: integer
                            example: 1250
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"

  /api/logs/statistics/overview:
    get:
      tags:
        - 统计分析
      summary: 获取统计概览
      description: 获取各个维度的统计概览数据
      parameters:
        - name: startTime
          in: query
          schema:
            type: string
            example: "2025-12-11 00:00:00"
        - name: endTime
          in: query
          schema:
            type: string
            example: "2025-12-11 23:59:59"
        - name: enterprise_id
          in: query
          schema:
            type: string
        - name: appid
          in: query
          schema:
            type: string
      responses:
        '200':
          description: 成功获取统计概览
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          levelStats:
                            type: array
                          serviceStats:
                            type: array
                          logTypeStats:
                            type: array
                          appidStats:
                            type: array
                          enterpriseStats:
                            type: array
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"

  /api/logs/statistics/timeseries:
    get:
      tags:
        - 统计分析
      summary: 获取时间序列统计数据
      description: 获取按时间排序的统计数据，用于绘制趋势图
      parameters:
        - name: startTime
          in: query
          schema:
            type: string
            example: "2025-12-11 00:00:00"
        - name: endTime
          in: query
          schema:
            type: string
            example: "2025-12-11 23:59:59"
        - name: statType
          in: query
          schema:
            type: string
            enum: [hour, day, week, month]
            default: hour
        - name: enterprise_id
          in: query
          schema:
            type: string
        - name: appid
          in: query
          schema:
            type: string
        - name: service
          in: query
          schema:
            type: string
        - name: level
          in: query
          schema:
            type: string
        - name: log_type
          in: query
          schema:
            type: string
      responses:
        '200':
          description: 成功获取时间序列数据
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          timeSeries:
                            type: array
                            items:
                              type: object
                              properties:
                                time:
                                  type: string
                                  example: "2025-12-11 14:00:00"
                                count:
                                  type: integer
                                  example: 125
                          statType:
                            type: string
                            example: "hour"
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"

  /api/logs/statistics/update:
    post:
      tags:
        - 统计分析
      summary: 手动更新统计数据
      description: 手动触发指定类型的统计数据更新
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStatisticsRequest'
            examples:
              update_hour:
                summary: 更新小时统计
                value:
                  statType: "hour"
                  targetTime: "2025-12-11T14:00:00.000Z"
              update_day:
                summary: 更新日统计
                value:
                  statType: "day"
                  targetTime: "2025-12-11T00:00:00.000Z"
      responses:
        '200':
          description: 统计数据更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          statType:
                            type: string
                            example: "hour"
                          targetTime:
                            type: string
                            example: "2025-12-11T14:00:00.000Z"
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                code: 0
                message: "statType必须是以下值之一: hour, day, week, month"

  /api/logs/statistics/update-all:
    post:
      tags:
        - 统计分析
      summary: 批量更新所有统计数据
      description: 批量更新所有类型的统计数据 (hour, day, week, month)
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                targetTime:
                  type: string
                  description: 目标时间 (ISO 8601格式)
                  example: "2025-12-11T14:00:00.000Z"
            examples:
              update_all:
                summary: 更新所有统计
                value:
                  targetTime: "2025-12-11T14:00:00.000Z"
              update_all_current:
                summary: 更新到当前时间
                value: {}
      responses:
        '200':
          description: 所有统计数据更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          updatedTypes:
                            type: array
                            items:
                              type: string
                            example: ["hour", "day", "week", "month"]
                          targetTime:
                            type: string
                            example: "2025-12-11T14:00:00.000Z"
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"

  # API 统计接口
  /api/logs/api-statistics:
    get:
      tags:
        - 统计分析
      summary: 查询API统计数据
      description: 根据条件查询API请求统计记录
      parameters:
        - name: startTime
          in: query
          description: 开始时间 (YYYY-MM-DD HH:mm:ss)
          schema:
            type: string
            example: "2025-12-11 10:00:00"
        - name: endTime
          in: query
          description: 结束时间 (YYYY-MM-DD HH:mm:ss)
          schema:
            type: string
            example: "2025-12-11 18:00:00"
        - name: statType
          in: query
          description: 统计类型
          schema:
            type: string
            enum: [hour, day, week, month]
            example: "day"
        - name: method
          in: query
          description: HTTP方法过滤
          schema:
            type: string
            example: "POST"
        - name: host
          in: query
          description: 主机名过滤
          schema:
            type: string
            example: "api.example.com"
        - name: path
          in: query
          description: URL路径过滤
          schema:
            type: string
            example: "/v1/auth/login"
        - name: appid
          in: query
          description: 应用ID过滤
          schema:
            type: string
            example: "app_123456"
        - name: enterprise_id
          in: query
          description: 企业ID过滤
          schema:
            type: string
            example: "ent_789012"
        - name: status_code
          in: query
          description: HTTP状态码过滤
          schema:
            type: integer
            example: 200
        - name: limit
          in: query
          description: 返回条数限制
          schema:
            type: integer
            default: 100
            minimum: 1
            maximum: 1000
        - name: offset
          in: query
          description: 偏移量
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: 成功获取API统计数据
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          statistics:
                            type: array
                            items:
                              $ref: '#/components/schemas/ApiStatisticsData'
                          total:
                            type: integer
                            example: 250
                          pagination:
                            type: object
                            properties:
                              limit:
                                type: integer
                                example: 100
                              offset:
                                type: integer
                                example: 0
                              hasMore:
                                type: boolean
                                example: true
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"

  /api/logs/api-statistics/aggregated:
    get:
      tags:
        - 统计分析
      summary: 获取API聚合统计数据
      description: 按指定字段分组获取API聚合统计数据
      parameters:
        - name: startTime
          in: query
          schema:
            type: string
            example: "2025-12-11 10:00:00"
        - name: endTime
          in: query
          schema:
            type: string
            example: "2025-12-11 18:00:00"
        - name: statType
          in: query
          schema:
            type: string
            enum: [hour, day, week, month]
            default: day
        - name: groupBy
          in: query
          description: 分组字段
          schema:
            type: string
            enum: [method, host, path, appid, enterprise_id, status_code]
            default: method
            example: "method"
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: 成功获取API聚合统计数据
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          aggregatedData:
                            type: array
                            items:
                              type: object
                              properties:
                                key:
                                  type: string
                                  example: "method"
                                value:
                                  type: string
                                  example: "POST"
                                totalCount:
                                  type: integer
                                  example: 1250
                                avgResponseTime:
                                  type: number
                                  example: 125.5
                                errorRate:
                                  type: number
                                  example: 1.2
                          groupBy:
                            type: string
                            example: "method"
                          total:
                            type: integer
                            example: 2500
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"

  /api/logs/api-statistics/overview:
    get:
      tags:
        - 统计分析
      summary: 获取API统计概览
      description: 获取各个维度的API统计概览数据
      parameters:
        - name: startTime
          in: query
          schema:
            type: string
            example: "2025-12-11 00:00:00"
        - name: endTime
          in: query
          schema:
            type: string
            example: "2025-12-11 23:59:59"
        - name: statType
          in: query
          schema:
            type: string
            enum: [hour, day, week, month]
            default: day
      responses:
        '200':
          description: 成功获取API统计概览
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          overview:
                            type: object
                            properties:
                              byMethod:
                                type: array
                              byHost:
                                type: array
                              byStatusCode:
                                type: array
                              byPath:
                                type: array
                          summary:
                            type: object
                            properties:
                              totalRequests:
                                type: integer
                                example: 5000
                              totalHosts:
                                type: integer
                                example: 5
                              totalPaths:
                                type: integer
                                example: 25
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"

  /api/logs/api-statistics/timeseries:
    get:
      tags:
        - 统计分析
      summary: 获取API时间序列数据
      description: 获取按时间排序的API统计数据，用于绘制趋势图
      parameters:
        - name: startDate
          in: query
          description: 开始日期 (YYYY-MM-DD)
          schema:
            type: string
            example: "2025-12-11"
        - name: endDate
          in: query
          description: 结束日期 (YYYY-MM-DD)
          schema:
            type: string
            example: "2025-12-11"
        - name: statType
          in: query
          schema:
            type: string
            enum: [hour, day, week, month]
            default: day
        - name: method
          in: query
          schema:
            type: string
        - name: host
          in: query
          schema:
            type: string
        - name: appid
          in: query
          schema:
            type: string
        - name: enterprise_id
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: 成功获取API时间序列数据
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          timeSeries:
                            type: array
                            items:
                              type: object
                              properties:
                                date:
                                  type: string
                                  example: "2025-12-11"
                                totalRequests:
                                  type: integer
                                  example: 1250
                                avgResponseTime:
                                  type: number
                                  example: 125.5
                                errorRate:
                                  type: number
                                  example: 1.2
                                totalErrors:
                                  type: integer
                                  example: 15
                          statType:
                            type: string
                            example: "day"
                          dateRange:
                            type: object
                            properties:
                              start:
                                type: string
                                example: "2025-12-11"
                              end:
                                type: string
                                example: "2025-12-11"
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"

  /api/logs/api-statistics/update:
    post:
      tags:
        - 统计分析
      summary: 手动更新API统计数据
      description: 手动触发指定类型的API统计数据更新
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStatisticsRequest'
            examples:
              update_api_hour:
                summary: 更新API小时统计
                value:
                  statType: "hour"
                  targetTime: "2025-12-11T14:00:00.000Z"
              update_api_day:
                summary: 更新API日统计
                value:
                  statType: "day"
                  targetTime: "2025-12-11T00:00:00.000Z"
      responses:
        '200':
          description: API统计数据更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          statType:
                            type: string
                            example: "hour"
                          targetTime:
                            type: string
                            example: "2025-12-11T14:00:00.000Z"
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25"

  /api/logs/api-statistics/update-all:
    post:
      tags:
        - 统计分析
      summary: 批量更新所有API统计数据
      description: 批量更新所有类型的API统计数据 (hour, day, week, month)
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                targetTime:
                  type: string
                  description: 目标时间 (ISO 8601格式)
                  example: "2025-12-11T14:00:00.000Z"
            examples:
              update_all_api:
                summary: 更新所有API统计
                value:
                  targetTime: "2025-12-11T14:00:00.000Z"
      responses:
        '200':
          description: 所有API统计数据更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          updatedTypes:
                            type: array
                            items:
                              type: string
                            example: ["hour", "day", "week", "month"]
                          targetTime:
                            type: string
                            example: "2025-12-11T14:00:00.000Z"
                          timestamp:
                            type: string
                            example: "2025-12-11 14:30:25" 